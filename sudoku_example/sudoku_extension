%Numerical representation of an atom 
assignment(X,Y):- output(X,Q), literal_tuple(Q,Y).

%Numertical representation of the atom to be explained
why_assignment(X,D,T):- why(X,T),answer(X),assignment(X,D).


%Pick any rule type
any_rule(V,P):- 1{rule(disjunction(V),normal(P)); rule(choice(V),normal(P)); rule(choice(V),sum(P)); rule(disjunction(V),sum(P)) }1,
atom_tuple(V), literal_tuple(P).
any_choice_rule(V,P):- 1{rule(choice(V),normal(P)); rule(choice(V),sum(P,_,_))}1, atom_tuple(V), literal_tuple(P).
any_disjunction_rule(V,P):- 1{rule(disjunction(V),normal(P)); rule(disjunction(V),sum(P)) }1, atom_tuple(V), literal_tuple(P).


val(1..9).

why_not(sudoku(A,B,D),0):- why(sudoku(A,B,C)), val(D), D!=C.
why_not(X,0):- why_not(X).

:- why_not(X,T), not reason(X,_,_,_,T).

time(0..10).

stop(X,T):- {why(X,T); why_not(X,T)}=1, reason(X,_,_,_,T'), T'<T, time(T).

stop(X,0):- 1{reason(X,X,fact,fact,0) ; reason(X,X,_,anti_fact,0) ; 
reason(X,X,_,opt_choice,0) ; reason(X,X,_,opt_choice_not,0)}, why(X,0).

stop(X,0):- 1{reason(X,X,fact,fact,0) ; reason(X,X,_,anti_fact,0) ; 
reason(X,X,_,opt_choice,0) ; reason(X,X,_,opt_choice_not,0)}, why_not(X,0).

path(X,Y,P,Z,T):- 1{why(X,T);why_not(X,T)}, reason(X,Y,P,Z,T), knodes(1,X,T).
{path(X,P,T) : reason(X,_,P,_,T)}=1:- 1{why(X,T);why_not(X,T)}, knodes(N,X,T), N!=1.
path(X,Y,P,Z,T):- path(X,P,T), reason(X,Y,P,Z,T).

knodes(N,X,T):- N= #count{P : reason(X,_,P,_,T)}, 1{why(X,T); why_not(X,T)}, time(T), assignment(X,_).

why(Y,T+1):-1{path(_,Y,_,rule_dependency,T);path(_,Y,_,rule_issue,T);reason(_,Y,_,constraint,T)},time(T), 
answer(Y), not stop(_,T).

why_not(sudoku(A,B,D),T+1):- path(sudoku(A,B,C),_,_,mand_choice,T), val(D), D!=C.


fact_count(N,X):- N = #count{ fact,X: path(X,_,_,fact,_)}, why(X,_).
fact_count(N,X):- N = #count{ fact,X: path(X,_,_,fact,_)}, why_not(X,_).

tots(N):- N= #sum{ Q,X: fact_count(Q,X)}.


#maximize{N: tots(N)}.
#minimize{T : stop(_,T)}.

#show path/5.
